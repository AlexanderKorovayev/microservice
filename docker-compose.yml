# docker-compose.yml
# Взаимодействия между контейнерами на одном компе.
# 1) Если контейнеры взаумодействуют без настроек docker compose, то необходимо в
#    коннектах бл прописывать host.docker.internal:50052, команда
#    host.docker.internal сама определит айпишник локал хоста и подставит его.
#    Для винды запускать контейнер нажно обычным образом docker run -p 50051:50051
#    Но если мы запускаем контейнер в линуксе, то необходимо использовать
#    docker run -p 50051:50051 --add-host host.docker.internal:host-gateway и
#    тогда контейнеры смогут находить друг друга.
# 2) Если контейнеры взаумодействуют с настройками docker compose. Для винды
#    подходит способ, когда мы прописываем host.docker.internal:50052.
#    Но на линуксе контейнеры не смогут найти друг друга, в таком случае нужно
#    прописывать в конфиге compose блок networks, который позволяет обращаться
#    к контейнеры в сети по его имени из compose. Например vessel:50052.
# 3) Команда для генерации grpc кода 
#    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/consignment/consignment.proto
#    protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/vessel/vessel.proto
# 4) docker exec -it web sh - посомтреть что в контейнере
#    docker-compose up/down запуск или остановка микросервисов
#
#
version: '3.5'

services:

  # Services
  consignment:
    restart: always
    build: ./shippy-service-consignment
    depends_on:
      - datastore
      - vessel
    ports:
      - 50051:50051
    environment:
      DB_HOST: "mongodb://datastore:27017"
    networks:
      - my_network

  vessel:
    restart: always
    build: ./shippy-service-vessel
    depends_on:
      - datastore
    ports:
      - 50052:50052
    environment:
      DB_HOST: "mongodb://datastore:27017"
    networks:
      - my_network

  # Commands
  cli:
    build: ./shippy-cli-consignment
    depends_on:
      - datastore
      - vessel
      - consignment
    networks:
      - my_network

  # Database tier
  datastore:
    image: mongo
    container_name: "datastore"
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/dev/null
    volumes:
      - ./data/db:/data/db # ensures data persistence between restarting
    ports:
      - 27017:27017
    command: mongod --logpath=/dev/null
    networks:
      - my_network
  
networks:
  my_network:
    driver: bridge
